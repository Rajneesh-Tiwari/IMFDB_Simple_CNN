### Git pull utils.py from https://github.com/fastai/courses/tree/master/deeplearning1/nbs

# IMFDB_Simple_CNN
Simple_CNN model
%matplotlib inline
from imp import reload

from __future__ import print_function, division
import utils; reload(utils)
from utils import *
from IPython.display import FileLink

path = "F:/AV/Indian Actors Age/train_DETg9GD/final_folder_structure/"

from __future__ import division,print_function

import os, json
from glob import glob
import numpy as np
np.set_printoptions(precision=4, linewidth=100)
from matplotlib import pyplot as plt

batch_size=16

# batches shuffle must be set to False when pre-computing features -- just reminder here since we will use precomputed features later on

batches = get_batches(path+'train', batch_size=batch_size)
val_batches = get_batches(path+'valid', batch_size=batch_size*2, shuffle=False)

(val_classes, trn_classes, val_labels, trn_labels, 
    val_filenames, filenames, test_filenames) = get_classes(path)
    
### CNN Simple try 0

def conv1(batches):
    model = Sequential([
            BatchNormalization(axis=1, input_shape=(3,224,224)),
            Convolution2D(32,3,3, activation='relu'),
            BatchNormalization(axis=1),
            MaxPooling2D((3,3)),
            Convolution2D(64,3,3, activation='relu'),
            BatchNormalization(axis=1),
            MaxPooling2D((3,3)),
            Flatten(),
            Dense(256, activation='relu'),
            BatchNormalization(),
            Dense(3, activation='softmax')
        ])
  model.compile(Adam(lr=1e-5), loss='categorical_crossentropy', metrics=['accuracy']) ## for 1st try lr ws 1e-4
  model.fit_generator(batches, batches.samples, nb_epoch=2, validation_data=val_batches, nb_val_samples=val_batches.samples)
  return model
    
model = conv1(batches)
    
### make predictions
k = 1
test_batches = get_batches(path+'test', batch_size=k, shuffle=False)
conv_test_feat = model.predict_generator(test_batches, test_batches.samples)

## recheck the order of classess as they appear in prediction
classes = sorted(batches.class_indices, key=batches.class_indices.get)
classes

## grab IDs
ID = []
for i in range(len(test_batches.filenames)):
    temper = (test_batches.filenames)[i].split("\\",1)[1]
    ID.append(temper)
ID = pd.DataFrame({"ID":ID})

## grab predictions
preds = np.argmax(conv_test_feat, axis=1)
preds = pd.DataFrame({'Class':preds})
preds['ID'] = ID

## append class labels to categorical class predictions
Class_upd = []
for i in range(len(preds)):
    if preds.Class[i] == 0:
        a = 'MIDDLE'
    elif preds.Class[i] == 1:
        a = "OLD"
    else:
        a = "YOUNG"
    Class_upd.append(a)
Class_upd        

# file to submit
preds['Class'] = Class_upd
preds.to_csv('Simple_CNN_morelr_2nd.csv', index=False)
